--- ../TraceReader.reference/TraceReader.cpp	2014-07-15 17:25:32.666452930 +0200
+++ TraceReader.cpp	2014-08-11 13:26:26.195594188 +0200
@@ -12,11 +12,44 @@
 #include <monitoring/association_mapper/modules/TopologyAssociationMapper/TopologyAssociationMapperOptions.hpp>
 #include <monitoring/ontology/modules/TopologyOntology/TopologyOntologyOptions.hpp>
 #include <monitoring/system_information/modules/TopologySystemInformation/TopologySystemInformationOptions.hpp>
+#include <util/time.h>
 
 #include "TraceReader.hpp"
 
 //#include <core/component/ActivitySerializableText.cpp>
 
+static bool convert_attribute_back( OntologyAttribute & oa, const VariableDatatype & val, void * out_value ){
+	switch( val.type() ) {
+		case VariableDatatype::Type::INT32:
+			*((int32_t*) out_value) = val.int32();
+			return true;
+		case VariableDatatype::Type::UINT32:
+			*((uint32_t*) out_value) = val.uint32();
+			return true;
+		case VariableDatatype::Type::INT64:
+			*((int64_t*) out_value) = val.int64();
+			return true;
+		case VariableDatatype::Type::UINT64:
+			*((uint64_t*) out_value) = val.uint64();
+			return true;
+		case VariableDatatype::Type::FLOAT:
+			*((float*) out_value) = val.flt();
+			return true;
+		case VariableDatatype::Type::DOUBLE:
+			*((double*) out_value) = val.dbl();
+			return true;
+		case VariableDatatype::Type::STRING: {
+			*(char**) out_value = strdup(val.str());
+			return true;
+		}
+		case VariableDatatype::Type::INVALID:
+		default:
+			assert(0 && "tried to optimize for a VariableDatatype of invalid type");
+			return false;
+	}
+}	
+
+
 Activity * TraceReader::nextActivity() {
 	try{
 	if( activityDeserializer->hasNextActivity() )
@@ -124,13 +157,41 @@
 	}
 }
 
+bool TraceReader::strattribute_compare( const Attribute & a, const char* attributeName  ) throw( NotFoundError )
+{
+	stringstream s;
+	stringstream debug_string;
+
+	OntologyAttributeFull oa = o->lookup_attribute_by_ID( a.id );
+	s << oa.domain << "/" << oa.name;
+	
+	//if( a.value.type() == VariableDatatype::Type::STRING){
+	//	s << '"' << a.value << '"' ;
+	//}else{
+	//	s << a.value ;
+	//}
+	
+	debug_string << "TR: strattribute_compare: s=" << s.str() << "\n";
+	cout << debug_string.str();
+
+	if ( s.str().compare(attributeName) == 0 ) {
+		return true;
+	} else {
+		return false;
+	}
+}
+
+
 
 void TraceReader::printActivity( Activity * a )
 {
-
 	stringstream str;
 	try {
-		
+		char buff[40];
+		siox_time_to_str( a->time_start(), buff, false );
+
+		str << buff << " ";
+
 		strdelta( a->time_stop() - a->time_start(), str );
 		if( printHostname )
 			str << " " << s->lookup_node_hostname( a->aid().cid.pid.nid );
@@ -170,6 +231,54 @@
 }
 
 
+
+void TraceReader::getActivityAttributeValueByName( Activity * a, const char * domain, const char * name, void * buf )
+{
+	
+	printf("TR: trying to find attribute\n");
+	try {
+		
+
+		UniqueInterfaceID uid = s->lookup_interface_of_activity( a->ucaid() );
+
+		auto oa = o->lookup_attribute_by_name( domain, name );
+
+		for( auto itr = a->attributeArray().begin() ; itr != a->attributeArray().end(); itr++ ) {
+			if ( itr->id == oa.aID ){
+				// activity has attribute write to buf
+				// TODO: buf = (void *) a->value;
+				printf("Attribute found! :)\n");
+				convert_attribute_back(oa, itr->value, buf);
+				break; // TODO: check if multiple instances of same attribute are allowed
+			} else {
+				// not found
+			}
+		}
+
+		
+
+		// parent ids!?
+//		if( a->parentArray().begin() != a->parentArray().end() ) {
+//			str << " ";
+//			for( auto itr = a->parentArray().begin(); itr != a->parentArray().end(); itr++ ) {
+//				if( itr != a->parentArray().begin() ) {
+//					str << ", ";
+//				}
+//				str << *itr;
+//			}
+//		}
+
+	} catch( NotFoundError & e ) {
+		cerr << "Error while parsing activity! Parsed so far: (ommited by getActivityAttributeValueByName)" << endl;
+	}
+}
+
+
+
+
+
+
+
 //try{
 //   o->set_process_attribute(pid, a1, v2);
 //   assert(false);
@@ -180,4 +289,4 @@
 //  assert(false);
 // }catch(NotFoundError & e){
 
-// }
\ No newline at end of file
+// }
